// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.269
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BaristaMatic.Specflow.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Stock calculation")]
    public partial class StockCalculationFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "StockCalculation.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Stock calculation", "In order to know the ingredients stock\r\nAs a user\r\nI want the machine to calculat" +
                    "e it", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("One coffee from scratch")]
        public virtual void OneCoffeeFromScratch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("One coffee from scratch", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("a full loaded barista matic coffee machine");
#line 8
 testRunner.When("I press 1");
#line 9
 testRunner.Then("the delivery status should be true");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Ingredient",
                        "Units"});
            table1.AddRow(new string[] {
                        "Coffee",
                        "7"});
            table1.AddRow(new string[] {
                        "Decaf Coffee",
                        "10"});
            table1.AddRow(new string[] {
                        "Sugar",
                        "9"});
            table1.AddRow(new string[] {
                        "Cream",
                        "9"});
            table1.AddRow(new string[] {
                        "Steamed Milk",
                        "10"});
            table1.AddRow(new string[] {
                        "Foamed Milk",
                        "10"});
            table1.AddRow(new string[] {
                        "Espresso",
                        "10"});
            table1.AddRow(new string[] {
                        "Cocoa Coffee",
                        "10"});
#line 10
 testRunner.And("the stock should be", ((string)(null)), table1);
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
